
Task_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b90  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08000d24  08000d24  00010d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d74  08000d74  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000d74  08000d74  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d74  08000d74  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d74  08000d74  00010d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d78  08000d78  00010d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000008  08000d84  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08000d84  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bb2  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ec  00000000  00000000  00020bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00020fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d8  00000000  00000000  000210f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ddb3  00000000  00000000  000211d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000af1  00000000  00000000  0002ef83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050233  00000000  00000000  0002fa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007fca7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000350  00000000  00000000  0007fcfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d0c 	.word	0x08000d0c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000d0c 	.word	0x08000d0c

080001d4 <DMA_Init>:
#include "DMA_utilities.h"
#include "GPIO_utilities.h"
#include "GPIO_interface.h"

void DMA_Init() {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
//	enable clock for DMA2 Because DMA1 does not have memory to memory direction mode
	RCC_AHB1ENR |= 1 << 22;
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <DMA_Init+0x1c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <DMA_Init+0x1c>)
 80001de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001e2:	6013      	str	r3, [r2, #0]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40023830 	.word	0x40023830

080001f4 <DMA_Channel_Config>:

void DMA_Channel_Config(char channel_Id,unsigned short number_of_transactions,char * src,char * dest,char memory_burst_mode,
		char peripheral_burst_mode,char memory_data_size,char peripheral_data_size,char memory_address_incremented,
		char peripheral_address_incremented,char fifo_threshold,char is_circlualr){
 80001f4:	b480      	push	{r7}
 80001f6:	b085      	sub	sp, #20
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60ba      	str	r2, [r7, #8]
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	4603      	mov	r3, r0
 8000200:	73fb      	strb	r3, [r7, #15]
 8000202:	460b      	mov	r3, r1
 8000204:	81bb      	strh	r3, [r7, #12]
	/*char circular_mode,*/
	DMA_CR(channel_Id) &= ~(0x01); // reset enable
 8000206:	7bfa      	ldrb	r2, [r7, #15]
 8000208:	4613      	mov	r3, r2
 800020a:	005b      	lsls	r3, r3, #1
 800020c:	4413      	add	r3, r2
 800020e:	00db      	lsls	r3, r3, #3
 8000210:	461a      	mov	r2, r3
 8000212:	4bc6      	ldr	r3, [pc, #792]	; (800052c <DMA_Channel_Config+0x338>)
 8000214:	4413      	add	r3, r2
 8000216:	6819      	ldr	r1, [r3, #0]
 8000218:	7bfa      	ldrb	r2, [r7, #15]
 800021a:	4613      	mov	r3, r2
 800021c:	005b      	lsls	r3, r3, #1
 800021e:	4413      	add	r3, r2
 8000220:	00db      	lsls	r3, r3, #3
 8000222:	461a      	mov	r2, r3
 8000224:	4bc1      	ldr	r3, [pc, #772]	; (800052c <DMA_Channel_Config+0x338>)
 8000226:	4413      	add	r3, r2
 8000228:	461a      	mov	r2, r3
 800022a:	f021 0301 	bic.w	r3, r1, #1
 800022e:	6013      	str	r3, [r2, #0]
	4 : channel 4
	5 : channel 5
	6 : channel 6
	7 : channel 7
	 */
	DMA_CR(channel_Id) &= ~(7 << 25); // first clear the bits
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	4613      	mov	r3, r2
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	4413      	add	r3, r2
 8000238:	00db      	lsls	r3, r3, #3
 800023a:	461a      	mov	r2, r3
 800023c:	4bbb      	ldr	r3, [pc, #748]	; (800052c <DMA_Channel_Config+0x338>)
 800023e:	4413      	add	r3, r2
 8000240:	6819      	ldr	r1, [r3, #0]
 8000242:	7bfa      	ldrb	r2, [r7, #15]
 8000244:	4613      	mov	r3, r2
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	4413      	add	r3, r2
 800024a:	00db      	lsls	r3, r3, #3
 800024c:	461a      	mov	r2, r3
 800024e:	4bb7      	ldr	r3, [pc, #732]	; (800052c <DMA_Channel_Config+0x338>)
 8000250:	4413      	add	r3, r2
 8000252:	461a      	mov	r2, r3
 8000254:	f021 6360 	bic.w	r3, r1, #234881024	; 0xe000000
 8000258:	6013      	str	r3, [r2, #0]
	DMA_CR(channel_Id) |= (channel_Id << 25); // select a channel
 800025a:	7bfa      	ldrb	r2, [r7, #15]
 800025c:	4613      	mov	r3, r2
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	4413      	add	r3, r2
 8000262:	00db      	lsls	r3, r3, #3
 8000264:	461a      	mov	r2, r3
 8000266:	4bb1      	ldr	r3, [pc, #708]	; (800052c <DMA_Channel_Config+0x338>)
 8000268:	4413      	add	r3, r2
 800026a:	6819      	ldr	r1, [r3, #0]
 800026c:	7bfb      	ldrb	r3, [r7, #15]
 800026e:	065b      	lsls	r3, r3, #25
 8000270:	4618      	mov	r0, r3
 8000272:	7bfa      	ldrb	r2, [r7, #15]
 8000274:	4613      	mov	r3, r2
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	4413      	add	r3, r2
 800027a:	00db      	lsls	r3, r3, #3
 800027c:	461a      	mov	r2, r3
 800027e:	4bab      	ldr	r3, [pc, #684]	; (800052c <DMA_Channel_Config+0x338>)
 8000280:	4413      	add	r3, r2
 8000282:	461a      	mov	r2, r3
 8000284:	ea41 0300 	orr.w	r3, r1, r0
 8000288:	6013      	str	r3, [r2, #0]

	// set number_of_transactions
	DMA_NDTR(channel_Id) |= number_of_transactions; // number of data register
 800028a:	7bfa      	ldrb	r2, [r7, #15]
 800028c:	4613      	mov	r3, r2
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	4413      	add	r3, r2
 8000292:	00db      	lsls	r3, r3, #3
 8000294:	461a      	mov	r2, r3
 8000296:	4ba6      	ldr	r3, [pc, #664]	; (8000530 <DMA_Channel_Config+0x33c>)
 8000298:	4413      	add	r3, r2
 800029a:	6818      	ldr	r0, [r3, #0]
 800029c:	89b9      	ldrh	r1, [r7, #12]
 800029e:	7bfa      	ldrb	r2, [r7, #15]
 80002a0:	4613      	mov	r3, r2
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	4413      	add	r3, r2
 80002a6:	00db      	lsls	r3, r3, #3
 80002a8:	461a      	mov	r2, r3
 80002aa:	4ba1      	ldr	r3, [pc, #644]	; (8000530 <DMA_Channel_Config+0x33c>)
 80002ac:	4413      	add	r3, r2
 80002ae:	461a      	mov	r2, r3
 80002b0:	ea40 0301 	orr.w	r3, r0, r1
 80002b4:	6013      	str	r3, [r2, #0]

	// set source and destination addresses
	DMA_PAR(channel_Id) = (unsigned int)src;
 80002b6:	7bfa      	ldrb	r2, [r7, #15]
 80002b8:	4613      	mov	r3, r2
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	4413      	add	r3, r2
 80002be:	00db      	lsls	r3, r3, #3
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b9c      	ldr	r3, [pc, #624]	; (8000534 <DMA_Channel_Config+0x340>)
 80002c4:	4413      	add	r3, r2
 80002c6:	461a      	mov	r2, r3
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	6013      	str	r3, [r2, #0]
	DMA_MAR(channel_Id) = (unsigned int)dest;
 80002cc:	7bfa      	ldrb	r2, [r7, #15]
 80002ce:	4613      	mov	r3, r2
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	4413      	add	r3, r2
 80002d4:	00db      	lsls	r3, r3, #3
 80002d6:	461a      	mov	r2, r3
 80002d8:	4b97      	ldr	r3, [pc, #604]	; (8000538 <DMA_Channel_Config+0x344>)
 80002da:	4413      	add	r3, r2
 80002dc:	461a      	mov	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6013      	str	r3, [r2, #0]
	SINGLE_BURST_MODE : single transfer
	INCR4_BURST_MODE  : INCR4 (incremental burst of 4 beats)
	INCR8_BURST_MODE  : INCR8 (incremental burst of 8 beats)
	INCR16_BURST_MODE : INCR16 (incremental burst of 16 beats)
	 */
	DMA_CR(channel_Id) &= ~(15 << 21); // clear the 4 bits
 80002e2:	7bfa      	ldrb	r2, [r7, #15]
 80002e4:	4613      	mov	r3, r2
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	4413      	add	r3, r2
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	461a      	mov	r2, r3
 80002ee:	4b8f      	ldr	r3, [pc, #572]	; (800052c <DMA_Channel_Config+0x338>)
 80002f0:	4413      	add	r3, r2
 80002f2:	6819      	ldr	r1, [r3, #0]
 80002f4:	7bfa      	ldrb	r2, [r7, #15]
 80002f6:	4613      	mov	r3, r2
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	4413      	add	r3, r2
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	461a      	mov	r2, r3
 8000300:	4b8a      	ldr	r3, [pc, #552]	; (800052c <DMA_Channel_Config+0x338>)
 8000302:	4413      	add	r3, r2
 8000304:	461a      	mov	r2, r3
 8000306:	f021 73f0 	bic.w	r3, r1, #31457280	; 0x1e00000
 800030a:	6013      	str	r3, [r2, #0]
	DMA_CR(channel_Id) |= (memory_burst_mode << 23); // Memory burst transfer configuration
 800030c:	7bfa      	ldrb	r2, [r7, #15]
 800030e:	4613      	mov	r3, r2
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	4413      	add	r3, r2
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	461a      	mov	r2, r3
 8000318:	4b84      	ldr	r3, [pc, #528]	; (800052c <DMA_Channel_Config+0x338>)
 800031a:	4413      	add	r3, r2
 800031c:	6819      	ldr	r1, [r3, #0]
 800031e:	7e3b      	ldrb	r3, [r7, #24]
 8000320:	05db      	lsls	r3, r3, #23
 8000322:	4618      	mov	r0, r3
 8000324:	7bfa      	ldrb	r2, [r7, #15]
 8000326:	4613      	mov	r3, r2
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	4413      	add	r3, r2
 800032c:	00db      	lsls	r3, r3, #3
 800032e:	461a      	mov	r2, r3
 8000330:	4b7e      	ldr	r3, [pc, #504]	; (800052c <DMA_Channel_Config+0x338>)
 8000332:	4413      	add	r3, r2
 8000334:	461a      	mov	r2, r3
 8000336:	ea41 0300 	orr.w	r3, r1, r0
 800033a:	6013      	str	r3, [r2, #0]
	DMA_CR(channel_Id) |= (peripheral_burst_mode << 21); // peripheral burst transfer configuration
 800033c:	7bfa      	ldrb	r2, [r7, #15]
 800033e:	4613      	mov	r3, r2
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	4413      	add	r3, r2
 8000344:	00db      	lsls	r3, r3, #3
 8000346:	461a      	mov	r2, r3
 8000348:	4b78      	ldr	r3, [pc, #480]	; (800052c <DMA_Channel_Config+0x338>)
 800034a:	4413      	add	r3, r2
 800034c:	6819      	ldr	r1, [r3, #0]
 800034e:	7f3b      	ldrb	r3, [r7, #28]
 8000350:	055b      	lsls	r3, r3, #21
 8000352:	4618      	mov	r0, r3
 8000354:	7bfa      	ldrb	r2, [r7, #15]
 8000356:	4613      	mov	r3, r2
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	4413      	add	r3, r2
 800035c:	00db      	lsls	r3, r3, #3
 800035e:	461a      	mov	r2, r3
 8000360:	4b72      	ldr	r3, [pc, #456]	; (800052c <DMA_Channel_Config+0x338>)
 8000362:	4413      	add	r3, r2
 8000364:	461a      	mov	r2, r3
 8000366:	ea41 0300 	orr.w	r3, r1, r0
 800036a:	6013      	str	r3, [r2, #0]
	BYTE_DATA_SIZE      : byte (8-bit)
	HALF_WORD_DATA_SIZE : half-word (16-bit)
	WORD_DATA_SIZE      : word (32-bit)
	RESERVED_DATA_SIZE  : reserved
	*/
	DMA_CR(channel_Id) &= ~(15 << 11); // clear the 4 bits
 800036c:	7bfa      	ldrb	r2, [r7, #15]
 800036e:	4613      	mov	r3, r2
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	4413      	add	r3, r2
 8000374:	00db      	lsls	r3, r3, #3
 8000376:	461a      	mov	r2, r3
 8000378:	4b6c      	ldr	r3, [pc, #432]	; (800052c <DMA_Channel_Config+0x338>)
 800037a:	4413      	add	r3, r2
 800037c:	6819      	ldr	r1, [r3, #0]
 800037e:	7bfa      	ldrb	r2, [r7, #15]
 8000380:	4613      	mov	r3, r2
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	4413      	add	r3, r2
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	461a      	mov	r2, r3
 800038a:	4b68      	ldr	r3, [pc, #416]	; (800052c <DMA_Channel_Config+0x338>)
 800038c:	4413      	add	r3, r2
 800038e:	461a      	mov	r2, r3
 8000390:	f421 43f0 	bic.w	r3, r1, #30720	; 0x7800
 8000394:	6013      	str	r3, [r2, #0]
	DMA_CR(channel_Id) |= (memory_data_size << 13); // Memory data size
 8000396:	7bfa      	ldrb	r2, [r7, #15]
 8000398:	4613      	mov	r3, r2
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	4413      	add	r3, r2
 800039e:	00db      	lsls	r3, r3, #3
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b62      	ldr	r3, [pc, #392]	; (800052c <DMA_Channel_Config+0x338>)
 80003a4:	4413      	add	r3, r2
 80003a6:	6819      	ldr	r1, [r3, #0]
 80003a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003ac:	035b      	lsls	r3, r3, #13
 80003ae:	4618      	mov	r0, r3
 80003b0:	7bfa      	ldrb	r2, [r7, #15]
 80003b2:	4613      	mov	r3, r2
 80003b4:	005b      	lsls	r3, r3, #1
 80003b6:	4413      	add	r3, r2
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	461a      	mov	r2, r3
 80003bc:	4b5b      	ldr	r3, [pc, #364]	; (800052c <DMA_Channel_Config+0x338>)
 80003be:	4413      	add	r3, r2
 80003c0:	461a      	mov	r2, r3
 80003c2:	ea41 0300 	orr.w	r3, r1, r0
 80003c6:	6013      	str	r3, [r2, #0]
	DMA_CR(channel_Id) |= (peripheral_data_size << 11); // peripheral data size
 80003c8:	7bfa      	ldrb	r2, [r7, #15]
 80003ca:	4613      	mov	r3, r2
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	4413      	add	r3, r2
 80003d0:	00db      	lsls	r3, r3, #3
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b55      	ldr	r3, [pc, #340]	; (800052c <DMA_Channel_Config+0x338>)
 80003d6:	4413      	add	r3, r2
 80003d8:	6819      	ldr	r1, [r3, #0]
 80003da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003de:	02db      	lsls	r3, r3, #11
 80003e0:	4618      	mov	r0, r3
 80003e2:	7bfa      	ldrb	r2, [r7, #15]
 80003e4:	4613      	mov	r3, r2
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	4413      	add	r3, r2
 80003ea:	00db      	lsls	r3, r3, #3
 80003ec:	461a      	mov	r2, r3
 80003ee:	4b4f      	ldr	r3, [pc, #316]	; (800052c <DMA_Channel_Config+0x338>)
 80003f0:	4413      	add	r3, r2
 80003f2:	461a      	mov	r2, r3
 80003f4:	ea41 0300 	orr.w	r3, r1, r0
 80003f8:	6013      	str	r3, [r2, #0]

	/* set increment mode for memory and peripheral
	0: address pointer is fixed
	1: address pointer is incremented after each data transfer
	*/
	DMA_CR(channel_Id) &= ~(2 << 9); // clear the 4 bits
 80003fa:	7bfa      	ldrb	r2, [r7, #15]
 80003fc:	4613      	mov	r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	4413      	add	r3, r2
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	461a      	mov	r2, r3
 8000406:	4b49      	ldr	r3, [pc, #292]	; (800052c <DMA_Channel_Config+0x338>)
 8000408:	4413      	add	r3, r2
 800040a:	6819      	ldr	r1, [r3, #0]
 800040c:	7bfa      	ldrb	r2, [r7, #15]
 800040e:	4613      	mov	r3, r2
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	4413      	add	r3, r2
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	461a      	mov	r2, r3
 8000418:	4b44      	ldr	r3, [pc, #272]	; (800052c <DMA_Channel_Config+0x338>)
 800041a:	4413      	add	r3, r2
 800041c:	461a      	mov	r2, r3
 800041e:	f421 6380 	bic.w	r3, r1, #1024	; 0x400
 8000422:	6013      	str	r3, [r2, #0]
	DMA_CR(channel_Id) |= (memory_address_incremented << 9); // p increment
 8000424:	7bfa      	ldrb	r2, [r7, #15]
 8000426:	4613      	mov	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	4413      	add	r3, r2
 800042c:	00db      	lsls	r3, r3, #3
 800042e:	461a      	mov	r2, r3
 8000430:	4b3e      	ldr	r3, [pc, #248]	; (800052c <DMA_Channel_Config+0x338>)
 8000432:	4413      	add	r3, r2
 8000434:	6819      	ldr	r1, [r3, #0]
 8000436:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800043a:	025b      	lsls	r3, r3, #9
 800043c:	4618      	mov	r0, r3
 800043e:	7bfa      	ldrb	r2, [r7, #15]
 8000440:	4613      	mov	r3, r2
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	4413      	add	r3, r2
 8000446:	00db      	lsls	r3, r3, #3
 8000448:	461a      	mov	r2, r3
 800044a:	4b38      	ldr	r3, [pc, #224]	; (800052c <DMA_Channel_Config+0x338>)
 800044c:	4413      	add	r3, r2
 800044e:	461a      	mov	r2, r3
 8000450:	ea41 0300 	orr.w	r3, r1, r0
 8000454:	6013      	str	r3, [r2, #0]
	DMA_CR(channel_Id) |= (peripheral_address_incremented << 10); // m increment
 8000456:	7bfa      	ldrb	r2, [r7, #15]
 8000458:	4613      	mov	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4413      	add	r3, r2
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	461a      	mov	r2, r3
 8000462:	4b32      	ldr	r3, [pc, #200]	; (800052c <DMA_Channel_Config+0x338>)
 8000464:	4413      	add	r3, r2
 8000466:	6819      	ldr	r1, [r3, #0]
 8000468:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800046c:	029b      	lsls	r3, r3, #10
 800046e:	4618      	mov	r0, r3
 8000470:	7bfa      	ldrb	r2, [r7, #15]
 8000472:	4613      	mov	r3, r2
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	4413      	add	r3, r2
 8000478:	00db      	lsls	r3, r3, #3
 800047a:	461a      	mov	r2, r3
 800047c:	4b2b      	ldr	r3, [pc, #172]	; (800052c <DMA_Channel_Config+0x338>)
 800047e:	4413      	add	r3, r2
 8000480:	461a      	mov	r2, r3
 8000482:	ea41 0300 	orr.w	r3, r1, r0
 8000486:	6013      	str	r3, [r2, #0]

	//set Data transfer direction(memory to memory)
	DMA_CR(channel_Id) &= ~(3 << 6); // clear the two bits
 8000488:	7bfa      	ldrb	r2, [r7, #15]
 800048a:	4613      	mov	r3, r2
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	4413      	add	r3, r2
 8000490:	00db      	lsls	r3, r3, #3
 8000492:	461a      	mov	r2, r3
 8000494:	4b25      	ldr	r3, [pc, #148]	; (800052c <DMA_Channel_Config+0x338>)
 8000496:	4413      	add	r3, r2
 8000498:	6819      	ldr	r1, [r3, #0]
 800049a:	7bfa      	ldrb	r2, [r7, #15]
 800049c:	4613      	mov	r3, r2
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	4413      	add	r3, r2
 80004a2:	00db      	lsls	r3, r3, #3
 80004a4:	461a      	mov	r2, r3
 80004a6:	4b21      	ldr	r3, [pc, #132]	; (800052c <DMA_Channel_Config+0x338>)
 80004a8:	4413      	add	r3, r2
 80004aa:	461a      	mov	r2, r3
 80004ac:	f021 03c0 	bic.w	r3, r1, #192	; 0xc0
 80004b0:	6013      	str	r3, [r2, #0]
	DMA_CR(channel_Id) |= (2 << 6); // Data transfer direction
 80004b2:	7bfa      	ldrb	r2, [r7, #15]
 80004b4:	4613      	mov	r3, r2
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	4413      	add	r3, r2
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	461a      	mov	r2, r3
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <DMA_Channel_Config+0x338>)
 80004c0:	4413      	add	r3, r2
 80004c2:	6819      	ldr	r1, [r3, #0]
 80004c4:	7bfa      	ldrb	r2, [r7, #15]
 80004c6:	4613      	mov	r3, r2
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	4413      	add	r3, r2
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <DMA_Channel_Config+0x338>)
 80004d2:	4413      	add	r3, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	f041 0380 	orr.w	r3, r1, #128	; 0x80
 80004da:	6013      	str	r3, [r2, #0]
	FIFO_ONE_FOURTH_THRESHOLD   : 1/4 full FIFO
	FIFO_HALF_THRESHOLD         : 1/2 full FIFO
	FIFO_THREE_FOURTH_THRESHOLD : 3/4 full FIFO
	FIFO_FULL_THRESHOLD         : full FIFO
	*/
	DMA_FCR(channel_Id) &= ~(3 << 0); // clear the 2 bits
 80004dc:	7bfa      	ldrb	r2, [r7, #15]
 80004de:	4613      	mov	r3, r2
 80004e0:	00db      	lsls	r3, r3, #3
 80004e2:	4413      	add	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	461a      	mov	r2, r3
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <DMA_Channel_Config+0x348>)
 80004ea:	4413      	add	r3, r2
 80004ec:	6819      	ldr	r1, [r3, #0]
 80004ee:	7bfa      	ldrb	r2, [r7, #15]
 80004f0:	4613      	mov	r3, r2
 80004f2:	00db      	lsls	r3, r3, #3
 80004f4:	4413      	add	r3, r2
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <DMA_Channel_Config+0x348>)
 80004fc:	4413      	add	r3, r2
 80004fe:	461a      	mov	r2, r3
 8000500:	f021 0303 	bic.w	r3, r1, #3
 8000504:	6013      	str	r3, [r2, #0]
	DMA_FCR(channel_Id) |= (fifo_threshold << 0); // set the threshold
 8000506:	7bfa      	ldrb	r2, [r7, #15]
 8000508:	4613      	mov	r3, r2
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	4413      	add	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	461a      	mov	r2, r3
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <DMA_Channel_Config+0x348>)
 8000514:	4413      	add	r3, r2
 8000516:	6818      	ldr	r0, [r3, #0]
 8000518:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800051c:	7bfa      	ldrb	r2, [r7, #15]
 800051e:	4613      	mov	r3, r2
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	4413      	add	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	461a      	mov	r2, r3
 8000528:	e00a      	b.n	8000540 <DMA_Channel_Config+0x34c>
 800052a:	bf00      	nop
 800052c:	40026410 	.word	0x40026410
 8000530:	40026414 	.word	0x40026414
 8000534:	40026418 	.word	0x40026418
 8000538:	4002641c 	.word	0x4002641c
 800053c:	40026424 	.word	0x40026424
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <DMA_Channel_Config+0x3c0>)
 8000542:	4413      	add	r3, r2
 8000544:	461a      	mov	r2, r3
 8000546:	ea40 0301 	orr.w	r3, r0, r1
 800054a:	6013      	str	r3, [r2, #0]

	/* set Circular mode
	0: Circular mode disabled
	1: Circular mode enabled
	*/
	DMA_CR(channel_Id) &= ~(1 << 8); // clear the bit
 800054c:	7bfa      	ldrb	r2, [r7, #15]
 800054e:	4613      	mov	r3, r2
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	4413      	add	r3, r2
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	461a      	mov	r2, r3
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <DMA_Channel_Config+0x3c4>)
 800055a:	4413      	add	r3, r2
 800055c:	6819      	ldr	r1, [r3, #0]
 800055e:	7bfa      	ldrb	r2, [r7, #15]
 8000560:	4613      	mov	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4413      	add	r3, r2
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	461a      	mov	r2, r3
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <DMA_Channel_Config+0x3c4>)
 800056c:	4413      	add	r3, r2
 800056e:	461a      	mov	r2, r3
 8000570:	f421 7380 	bic.w	r3, r1, #256	; 0x100
 8000574:	6013      	str	r3, [r2, #0]
	DMA_CR(channel_Id) |= (is_circlualr << 8); // set the threshold
 8000576:	7bfa      	ldrb	r2, [r7, #15]
 8000578:	4613      	mov	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	461a      	mov	r2, r3
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <DMA_Channel_Config+0x3c4>)
 8000584:	4413      	add	r3, r2
 8000586:	6819      	ldr	r1, [r3, #0]
 8000588:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800058c:	021b      	lsls	r3, r3, #8
 800058e:	4618      	mov	r0, r3
 8000590:	7bfa      	ldrb	r2, [r7, #15]
 8000592:	4613      	mov	r3, r2
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	4413      	add	r3, r2
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	461a      	mov	r2, r3
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <DMA_Channel_Config+0x3c4>)
 800059e:	4413      	add	r3, r2
 80005a0:	461a      	mov	r2, r3
 80005a2:	ea41 0300 	orr.w	r3, r1, r0
 80005a6:	6013      	str	r3, [r2, #0]

}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40026424 	.word	0x40026424
 80005b8:	40026410 	.word	0x40026410

080005bc <DMA_Enable_IR>:

void DMA_Enable_IR(int channel_Id,char priority_level){
 80005bc:	b4b0      	push	{r4, r5, r7}
 80005be:	b08b      	sub	sp, #44	; 0x2c
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
	LOW_PRIORITY_LEVEL       : Low
	MEDIUM_PRIORITY_LEVEL    : Medium
	HIGH_PRIORITY_LEVEL      : High
	VERY_HIGH_PRIORITY_LEVEL : Very high
	*/
	DMA_CR(channel_Id) &= ~(3 << 16);	//	clear the bit
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <DMA_Enable_IR+0xec>)
 80005d6:	4413      	add	r3, r2
 80005d8:	6819      	ldr	r1, [r3, #0]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	4613      	mov	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	4413      	add	r3, r2
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <DMA_Enable_IR+0xec>)
 80005e8:	4413      	add	r3, r2
 80005ea:	461a      	mov	r2, r3
 80005ec:	f421 3340 	bic.w	r3, r1, #196608	; 0x30000
 80005f0:	6013      	str	r3, [r2, #0]
	DMA_CR(channel_Id) |=  (priority_level << 16);	//	Priority level
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <DMA_Enable_IR+0xec>)
 8000600:	4413      	add	r3, r2
 8000602:	6819      	ldr	r1, [r3, #0]
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	041b      	lsls	r3, r3, #16
 8000608:	4618      	mov	r0, r3
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	461a      	mov	r2, r3
 8000616:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <DMA_Enable_IR+0xec>)
 8000618:	4413      	add	r3, r2
 800061a:	461a      	mov	r2, r3
 800061c:	ea41 0300 	orr.w	r3, r1, r0
 8000620:	6013      	str	r3, [r2, #0]

	// enable NVIC line for the corresponding channel
	int channels_positions[8] = {56,57,58,59,60,68,69,70}; // positions for DMA2 streams
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <DMA_Enable_IR+0xf0>)
 8000624:	f107 0408 	add.w	r4, r7, #8
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000632:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if((channels_positions[channel_Id] >= 32) && (channels_positions[channel_Id] <= 63)) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800063e:	4413      	add	r3, r2
 8000640:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000644:	2b1f      	cmp	r3, #31
 8000646:	dd19      	ble.n	800067c <DMA_Enable_IR+0xc0>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000650:	4413      	add	r3, r2
 8000652:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000656:	2b3f      	cmp	r3, #63	; 0x3f
 8000658:	dc10      	bgt.n	800067c <DMA_Enable_IR+0xc0>
		NVIC_ISER1 |= (1 << (channels_positions[channel_Id] - 32));
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <DMA_Enable_IR+0xf4>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000666:	440b      	add	r3, r1
 8000668:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800066c:	3b20      	subs	r3, #32
 800066e:	2101      	movs	r1, #1
 8000670:	fa01 f303 	lsl.w	r3, r1, r3
 8000674:	490e      	ldr	r1, [pc, #56]	; (80006b0 <DMA_Enable_IR+0xf4>)
 8000676:	4313      	orrs	r3, r2
 8000678:	600b      	str	r3, [r1, #0]
 800067a:	e010      	b.n	800069e <DMA_Enable_IR+0xe2>
	}else {
		NVIC_ISER2 |= (1 << (channels_positions[channel_Id] - 32));
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <DMA_Enable_IR+0xf8>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000688:	440b      	add	r3, r1
 800068a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800068e:	3b20      	subs	r3, #32
 8000690:	2101      	movs	r1, #1
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	4907      	ldr	r1, [pc, #28]	; (80006b4 <DMA_Enable_IR+0xf8>)
 8000698:	4313      	orrs	r3, r2
 800069a:	600b      	str	r3, [r1, #0]
	}

}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	372c      	adds	r7, #44	; 0x2c
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bcb0      	pop	{r4, r5, r7}
 80006a6:	4770      	bx	lr
 80006a8:	40026410 	.word	0x40026410
 80006ac:	08000d24 	.word	0x08000d24
 80006b0:	e000e104 	.word	0xe000e104
 80006b4:	e000e108 	.word	0xe000e108

080006b8 <DMA_ENABLE_TF_IR>:

void DMA_ENABLE_TF_IR(int channel_Id){
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	DMA_CR(channel_Id) |= (1 << 4); // Transfer complete interrupt enable
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	4613      	mov	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <DMA_ENABLE_TF_IR+0x40>)
 80006ce:	4413      	add	r3, r2
 80006d0:	6819      	ldr	r1, [r3, #0]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	461a      	mov	r2, r3
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <DMA_ENABLE_TF_IR+0x40>)
 80006e0:	4413      	add	r3, r2
 80006e2:	461a      	mov	r2, r3
 80006e4:	f041 0310 	orr.w	r3, r1, #16
 80006e8:	6013      	str	r3, [r2, #0]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40026410 	.word	0x40026410

080006fc <DMA_CLEAR_TF_IR>:
void DMA_CLEAR_TF_IR(int channel_Id){
 80006fc:	b490      	push	{r4, r7}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	int bits[4] = {5,11,21,27};// positions for bits in the interrupt clear reg for Transfer complete
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <DMA_CLEAR_TF_IR+0x64>)
 8000706:	f107 0408 	add.w	r4, r7, #8
 800070a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(channel_Id <= 3){ //check if its low or high
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b03      	cmp	r3, #3
 8000714:	dc0f      	bgt.n	8000736 <DMA_CLEAR_TF_IR+0x3a>
		DMA_LIFCR |= (1 << bits[channel_Id]);
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <DMA_CLEAR_TF_IR+0x68>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	f107 0118 	add.w	r1, r7, #24
 8000722:	440b      	add	r3, r1
 8000724:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000728:	2101      	movs	r1, #1
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	490d      	ldr	r1, [pc, #52]	; (8000764 <DMA_CLEAR_TF_IR+0x68>)
 8000730:	4313      	orrs	r3, r2
 8000732:	600b      	str	r3, [r1, #0]
	}else {
		DMA_HIFCR |= (1 << bits[channel_Id]);
	}
}
 8000734:	e00e      	b.n	8000754 <DMA_CLEAR_TF_IR+0x58>
		DMA_HIFCR |= (1 << bits[channel_Id]);
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <DMA_CLEAR_TF_IR+0x6c>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	f107 0118 	add.w	r1, r7, #24
 8000742:	440b      	add	r3, r1
 8000744:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	4906      	ldr	r1, [pc, #24]	; (8000768 <DMA_CLEAR_TF_IR+0x6c>)
 8000750:	4313      	orrs	r3, r2
 8000752:	600b      	str	r3, [r1, #0]
}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bc90      	pop	{r4, r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	08000d44 	.word	0x08000d44
 8000764:	40026408 	.word	0x40026408
 8000768:	4002640c 	.word	0x4002640c

0800076c <DMA_ENABLE_HT_IR>:

void DMA_ENABLE_HT_IR(int channel_Id){
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	DMA_CR(channel_Id) |= (1 << 3); //  Half transfer interrupt enable
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4613      	mov	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4413      	add	r3, r2
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	461a      	mov	r2, r3
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <DMA_ENABLE_HT_IR+0x40>)
 8000782:	4413      	add	r3, r2
 8000784:	6819      	ldr	r1, [r3, #0]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	4613      	mov	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	4413      	add	r3, r2
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	461a      	mov	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <DMA_ENABLE_HT_IR+0x40>)
 8000794:	4413      	add	r3, r2
 8000796:	461a      	mov	r2, r3
 8000798:	f041 0308 	orr.w	r3, r1, #8
 800079c:	6013      	str	r3, [r2, #0]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40026410 	.word	0x40026410

080007b0 <DMA_CLEAR_HT_IR>:
void DMA_CLEAR_HT_IR(int channel_Id){
 80007b0:	b490      	push	{r4, r7}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	int bits[4] = {4,10,20,26};// positions for bits in the interrupt clear reg for half transfer
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <DMA_CLEAR_HT_IR+0x64>)
 80007ba:	f107 0408 	add.w	r4, r7, #8
 80007be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(channel_Id <= 3 ){ //check if its low or high
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	dc0f      	bgt.n	80007ea <DMA_CLEAR_HT_IR+0x3a>
		DMA_LIFCR |= (1 << bits[channel_Id]);
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <DMA_CLEAR_HT_IR+0x68>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	f107 0118 	add.w	r1, r7, #24
 80007d6:	440b      	add	r3, r1
 80007d8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80007dc:	2101      	movs	r1, #1
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	490d      	ldr	r1, [pc, #52]	; (8000818 <DMA_CLEAR_HT_IR+0x68>)
 80007e4:	4313      	orrs	r3, r2
 80007e6:	600b      	str	r3, [r1, #0]
	}else {
		DMA_HIFCR |= (1 << bits[channel_Id]);
	}
}
 80007e8:	e00e      	b.n	8000808 <DMA_CLEAR_HT_IR+0x58>
		DMA_HIFCR |= (1 << bits[channel_Id]);
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <DMA_CLEAR_HT_IR+0x6c>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	f107 0118 	add.w	r1, r7, #24
 80007f6:	440b      	add	r3, r1
 80007f8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	4906      	ldr	r1, [pc, #24]	; (800081c <DMA_CLEAR_HT_IR+0x6c>)
 8000804:	4313      	orrs	r3, r2
 8000806:	600b      	str	r3, [r1, #0]
}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bc90      	pop	{r4, r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	08000d54 	.word	0x08000d54
 8000818:	40026408 	.word	0x40026408
 800081c:	4002640c 	.word	0x4002640c

08000820 <DMA_Current_IR_Status>:
		DMA_HIFCR |= (1 << bits[channel_Id]);
	}

}

DMA_IR_STATUS DMA_Current_IR_Status(int channel_Id){
 8000820:	b490      	push	{r4, r7}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
	unsigned int error_bits[4] = {3,9,19,25};
 800082a:	4b44      	ldr	r3, [pc, #272]	; (800093c <DMA_Current_IR_Status+0x11c>)
 800082c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned int HT_bits[4] = {4,10,20,26};
 8000836:	4b42      	ldr	r3, [pc, #264]	; (8000940 <DMA_Current_IR_Status+0x120>)
 8000838:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800083c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800083e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned int TF_bits[4] = {5,11,21,27};
 8000842:	4b40      	ldr	r3, [pc, #256]	; (8000944 <DMA_Current_IR_Status+0x124>)
 8000844:	f107 0414 	add.w	r4, r7, #20
 8000848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800084a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned int error_bit = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	64fb      	str	r3, [r7, #76]	; 0x4c
	unsigned int HF_bit = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	64bb      	str	r3, [r7, #72]	; 0x48
	unsigned int TF_bit = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_IR_STATUS status ;
	if(channel_Id <= 3){
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b03      	cmp	r3, #3
 800085e:	dc30      	bgt.n	80008c2 <DMA_Current_IR_Status+0xa2>
		error_bit = (DMA_LISR >> error_bits[channel_Id]) & 1;
 8000860:	4b39      	ldr	r3, [pc, #228]	; (8000948 <DMA_Current_IR_Status+0x128>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800086c:	440b      	add	r3, r1
 800086e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000872:	fa22 f303 	lsr.w	r3, r2, r3
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
		status.ERROR_IR = error_bit;
 800087c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800087e:	613b      	str	r3, [r7, #16]
		HF_bit = (DMA_LISR >> HT_bits[channel_Id]) & 1;
 8000880:	4b31      	ldr	r3, [pc, #196]	; (8000948 <DMA_Current_IR_Status+0x128>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800088c:	440b      	add	r3, r1
 800088e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000892:	fa22 f303 	lsr.w	r3, r2, r3
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
		status.HF_IR = HF_bit;
 800089c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800089e:	60fb      	str	r3, [r7, #12]
		TF_bit = (DMA_LISR >> TF_bits[channel_Id]) & 1;
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <DMA_Current_IR_Status+0x128>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80008ac:	440b      	add	r3, r1
 80008ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80008b2:	fa22 f303 	lsr.w	r3, r2, r3
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
		status.TF_IR = TF_bit;
 80008bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	e02f      	b.n	8000922 <DMA_Current_IR_Status+0x102>
	}else {
		error_bit = (DMA_HISR >> error_bits[channel_Id]) & 1;
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <DMA_Current_IR_Status+0x12c>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80008ce:	440b      	add	r3, r1
 80008d0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80008d4:	fa22 f303 	lsr.w	r3, r2, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
		status.ERROR_IR = error_bit;
 80008de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008e0:	613b      	str	r3, [r7, #16]
		HF_bit = (DMA_HISR >> HT_bits[channel_Id]) & 1;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <DMA_Current_IR_Status+0x12c>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80008ee:	440b      	add	r3, r1
 80008f0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80008f4:	fa22 f303 	lsr.w	r3, r2, r3
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	64bb      	str	r3, [r7, #72]	; 0x48
		status.HF_IR = HF_bit;
 80008fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000900:	60fb      	str	r3, [r7, #12]
		TF_bit = (DMA_HISR >> TF_bits[channel_Id]) & 1;
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <DMA_Current_IR_Status+0x12c>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800090e:	440b      	add	r3, r1
 8000910:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8000914:	fa22 f303 	lsr.w	r3, r2, r3
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	647b      	str	r3, [r7, #68]	; 0x44
		status.TF_IR = TF_bit;
 800091e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000920:	60bb      	str	r3, [r7, #8]
	}
	return status;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	461c      	mov	r4, r3
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800092e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	3750      	adds	r7, #80	; 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bc90      	pop	{r4, r7}
 800093a:	4770      	bx	lr
 800093c:	08000d64 	.word	0x08000d64
 8000940:	08000d54 	.word	0x08000d54
 8000944:	08000d44 	.word	0x08000d44
 8000948:	40026400 	.word	0x40026400
 800094c:	40026404 	.word	0x40026404

08000950 <DMA_Request_Transfer>:
void DMA_Request_Transfer(int channel_Id) {
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	DMA_CR(channel_Id) |= (1 << 0); // start transfer
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	461a      	mov	r2, r3
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <DMA_Request_Transfer+0x40>)
 8000966:	4413      	add	r3, r2
 8000968:	6819      	ldr	r1, [r3, #0]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <DMA_Request_Transfer+0x40>)
 8000978:	4413      	add	r3, r2
 800097a:	461a      	mov	r2, r3
 800097c:	f041 0301 	orr.w	r3, r1, #1
 8000980:	6013      	str	r3, [r2, #0]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40026410 	.word	0x40026410

08000994 <GPIO_EnableClk>:
	(unsigned int*)GPIOB_BASE_ADDRESS
};


void GPIO_EnableClk(unsigned char portID)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	RCC_AHB1ENR |= (1 <<portID);
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <GPIO_EnableClk+0x2c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	2101      	movs	r1, #1
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	4611      	mov	r1, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <GPIO_EnableClk+0x2c>)
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6013      	str	r3, [r2, #0]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023830 	.word	0x40023830

080009c4 <GPIO_Init>:

void GPIO_Init(unsigned char portID, unsigned char PIN_NO, unsigned char PIN_Dir)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	460b      	mov	r3, r1
 80009d0:	71bb      	strb	r3, [r7, #6]
 80009d2:	4613      	mov	r3, r2
 80009d4:	717b      	strb	r3, [r7, #5]
	
		// clear this bit field (MODER)
		*(GPIO[portID]+0) &= ~(0x03 << (2*PIN_NO));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a42      	ldr	r2, [pc, #264]	; (8000ae4 <GPIO_Init+0x120>)
 80009da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	2103      	movs	r1, #3
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	493c      	ldr	r1, [pc, #240]	; (8000ae4 <GPIO_Init+0x120>)
 80009f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009f6:	4002      	ands	r2, r0
 80009f8:	601a      	str	r2, [r3, #0]
		// assign value for the bit field
		*(GPIO[portID]+0) |= (PIN_Dir>>4) <<(2*PIN_NO); // 0x10
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a39      	ldr	r2, [pc, #228]	; (8000ae4 <GPIO_Init+0x120>)
 80009fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	797b      	ldrb	r3, [r7, #5]
 8000a06:	091b      	lsrs	r3, r3, #4
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fa01 f303 	lsl.w	r3, r1, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	4932      	ldr	r1, [pc, #200]	; (8000ae4 <GPIO_Init+0x120>)
 8000a1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a1e:	4302      	orrs	r2, r0
 8000a20:	601a      	str	r2, [r3, #0]


		if((PIN_Dir>>4) == 1) /* output */
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	091b      	lsrs	r3, r3, #4
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d127      	bne.n	8000a7c <GPIO_Init+0xb8>
		{
			// clear the bit field (OTYPER)
			*(GPIO[portID]+1) &= ~(1 << PIN_NO);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ae4 <GPIO_Init+0x120>)
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	3304      	adds	r3, #4
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4927      	ldr	r1, [pc, #156]	; (8000ae4 <GPIO_Init+0x120>)
 8000a48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	4002      	ands	r2, r0
 8000a50:	601a      	str	r2, [r3, #0]
			// assign value for the bit field
			*(GPIO[portID]+1) |= (PIN_Dir & 0x0f) <<PIN_NO;
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <GPIO_Init+0x120>)
 8000a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	797b      	ldrb	r3, [r7, #5]
 8000a60:	f003 010f 	and.w	r1, r3, #15
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	491d      	ldr	r1, [pc, #116]	; (8000ae4 <GPIO_Init+0x120>)
 8000a70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a74:	3304      	adds	r3, #4
 8000a76:	4302      	orrs	r2, r0
 8000a78:	601a      	str	r2, [r3, #0]
		else
		{
			// error
		}
		
}
 8000a7a:	e02d      	b.n	8000ad8 <GPIO_Init+0x114>
		else if ((PIN_Dir>>4) == 1)  /* input */
 8000a7c:	797b      	ldrb	r3, [r7, #5]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d128      	bne.n	8000ad8 <GPIO_Init+0x114>
			*(GPIO[portID]+3) &= ~(3 << (PIN_NO*2));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <GPIO_Init+0x120>)
 8000a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8e:	330c      	adds	r3, #12
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2103      	movs	r1, #3
 8000a98:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4910      	ldr	r1, [pc, #64]	; (8000ae4 <GPIO_Init+0x120>)
 8000aa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aa8:	330c      	adds	r3, #12
 8000aaa:	4002      	ands	r2, r0
 8000aac:	601a      	str	r2, [r3, #0]
			*(GPIO[portID]+3) |= (PIN_Dir & 0x0f) <<(PIN_NO*2);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <GPIO_Init+0x120>)
 8000ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab6:	330c      	adds	r3, #12
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	797b      	ldrb	r3, [r7, #5]
 8000abc:	f003 010f 	and.w	r1, r3, #15
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4905      	ldr	r1, [pc, #20]	; (8000ae4 <GPIO_Init+0x120>)
 8000ace:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ad2:	330c      	adds	r3, #12
 8000ad4:	4302      	orrs	r2, r0
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <GPIO_WritePin>:

void GPIO_WritePin(unsigned char portID, unsigned char PIN_NO, unsigned char Data)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	460b      	mov	r3, r1
 8000af4:	71bb      	strb	r3, [r7, #6]
 8000af6:	4613      	mov	r3, r2
 8000af8:	717b      	strb	r3, [r7, #5]
	// filtering Data
	if(Data != 0) { Data=1; }
 8000afa:	797b      	ldrb	r3, [r7, #5]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <GPIO_WritePin+0x1c>
 8000b00:	2301      	movs	r3, #1
 8000b02:	717b      	strb	r3, [r7, #5]

	
	// clear bits (ODR)
	*(GPIO[portID]+5) &= ~(1<< PIN_NO);
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <GPIO_WritePin+0x74>)
 8000b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0c:	3314      	adds	r3, #20
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	2101      	movs	r1, #1
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	490f      	ldr	r1, [pc, #60]	; (8000b5c <GPIO_WritePin+0x74>)
 8000b20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b24:	3314      	adds	r3, #20
 8000b26:	4002      	ands	r2, r0
 8000b28:	601a      	str	r2, [r3, #0]
	// assign "Data" to bits
	*(GPIO[portID]+5) |= (Data << PIN_NO);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <GPIO_WritePin+0x74>)
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	3314      	adds	r3, #20
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	7979      	ldrb	r1, [r7, #5]
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4906      	ldr	r1, [pc, #24]	; (8000b5c <GPIO_WritePin+0x74>)
 8000b44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b48:	3314      	adds	r3, #20
 8000b4a:	4302      	orrs	r2, r0
 8000b4c:	601a      	str	r2, [r3, #0]
	
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000000 	.word	0x20000000

08000b60 <isr_test>:
#include "GPIO_interface.h"
#include "DMA_utilities.h"

char scr[100];
char dest[100];
void isr_test() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
	DMA_IR_STATUS st = DMA_Current_IR_Status(0);
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fe58 	bl	8000820 <DMA_Current_IR_Status>
	if(st.HF_IR){
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d007      	beq.n	8000b86 <isr_test+0x26>
		GPIO_WritePin(PORTA,PIN1,1);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ffb4 	bl	8000ae8 <GPIO_WritePin>
		DMA_CLEAR_HT_IR(0);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fe15 	bl	80007b0 <DMA_CLEAR_HT_IR>
	}
	if(st.TF_IR){
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d007      	beq.n	8000b9c <isr_test+0x3c>
		GPIO_WritePin(PORTA,PIN0,1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff ffa9 	bl	8000ae8 <GPIO_WritePin>
		DMA_CLEAR_TF_IR(0);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fdb0 	bl	80006fc <DMA_CLEAR_TF_IR>
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <main>:
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af08      	add	r7, sp, #32
	GPIO_EnableClk(PORTA);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff fef2 	bl	8000994 <GPIO_EnableClk>
	GPIO_Init(PORTA,PIN0,OUTPUT_PUSHPULL);
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ff05 	bl	80009c4 <GPIO_Init>
	GPIO_Init(PORTA,PIN1,OUTPUT_PUSHPULL);
 8000bba:	2210      	movs	r2, #16
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff ff00 	bl	80009c4 <GPIO_Init>
	// initalize scr with ones
	for(unsigned char i=0; i<100; i++) {
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	e006      	b.n	8000bd8 <main+0x34>
	scr[i] = 1;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <main+0xa0>)
 8000bce:	2101      	movs	r1, #1
 8000bd0:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i=0; i<100; i++) {
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b63      	cmp	r3, #99	; 0x63
 8000bdc:	d9f5      	bls.n	8000bca <main+0x26>
	}
	for(unsigned char i=0; i<100; i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	71bb      	strb	r3, [r7, #6]
 8000be2:	e006      	b.n	8000bf2 <main+0x4e>
		dest[i] = 0;
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <main+0xa4>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i=0; i<100; i++) {
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	71bb      	strb	r3, [r7, #6]
 8000bf2:	79bb      	ldrb	r3, [r7, #6]
 8000bf4:	2b63      	cmp	r3, #99	; 0x63
 8000bf6:	d9f5      	bls.n	8000be4 <main+0x40>
	}
	DMA_Init();
 8000bf8:	f7ff faec 	bl	80001d4 <DMA_Init>
	DMA_Channel_Config(0,20,scr, dest,INCR4_BURST_MODE,INCR4_BURST_MODE,BYTE_DATA_SIZE,BYTE_DATA_SIZE,1,1,
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9307      	str	r3, [sp, #28]
 8000c00:	2300      	movs	r3, #0
 8000c02:	9306      	str	r3, [sp, #24]
 8000c04:	2301      	movs	r3, #1
 8000c06:	9305      	str	r3, [sp, #20]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	9304      	str	r3, [sp, #16]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9303      	str	r3, [sp, #12]
 8000c10:	2300      	movs	r3, #0
 8000c12:	9302      	str	r3, [sp, #8]
 8000c14:	2301      	movs	r3, #1
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <main+0xa4>)
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <main+0xa0>)
 8000c20:	2114      	movs	r1, #20
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fae6 	bl	80001f4 <DMA_Channel_Config>
			FIFO_ONE_FOURTH_THRESHOLD,0);
	DMA_Enable_IR(0,VERY_HIGH_PRIORITY_LEVEL);
 8000c28:	2103      	movs	r1, #3
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fcc6 	bl	80005bc <DMA_Enable_IR>
	DMA_ENABLE_TF_IR(0);
 8000c30:	2000      	movs	r0, #0
 8000c32:	f7ff fd41 	bl	80006b8 <DMA_ENABLE_TF_IR>
	DMA_ENABLE_HT_IR(0);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff fd98 	bl	800076c <DMA_ENABLE_HT_IR>
	DMA_Request_Transfer(0);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fe87 	bl	8000950 <DMA_Request_Transfer>
//	// ensure the completion of the process
	while(1) {
 8000c42:	e7fe      	b.n	8000c42 <main+0x9e>
 8000c44:	20000088 	.word	0x20000088
 8000c48:	20000024 	.word	0x20000024

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c8c:	4c0b      	ldr	r4, [pc, #44]	; (8000cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ffd7 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f000 f811 	bl	8000cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff ff7f 	bl	8000ba4 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000cb4:	08000d7c 	.word	0x08000d7c
  ldr r2, =_sbss
 8000cb8:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000cbc:	200000ec 	.word	0x200000ec

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <__libc_init_array>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	4d0d      	ldr	r5, [pc, #52]	; (8000cfc <__libc_init_array+0x38>)
 8000cc8:	4c0d      	ldr	r4, [pc, #52]	; (8000d00 <__libc_init_array+0x3c>)
 8000cca:	1b64      	subs	r4, r4, r5
 8000ccc:	10a4      	asrs	r4, r4, #2
 8000cce:	2600      	movs	r6, #0
 8000cd0:	42a6      	cmp	r6, r4
 8000cd2:	d109      	bne.n	8000ce8 <__libc_init_array+0x24>
 8000cd4:	4d0b      	ldr	r5, [pc, #44]	; (8000d04 <__libc_init_array+0x40>)
 8000cd6:	4c0c      	ldr	r4, [pc, #48]	; (8000d08 <__libc_init_array+0x44>)
 8000cd8:	f000 f818 	bl	8000d0c <_init>
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	10a4      	asrs	r4, r4, #2
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	42a6      	cmp	r6, r4
 8000ce4:	d105      	bne.n	8000cf2 <__libc_init_array+0x2e>
 8000ce6:	bd70      	pop	{r4, r5, r6, pc}
 8000ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cec:	4798      	blx	r3
 8000cee:	3601      	adds	r6, #1
 8000cf0:	e7ee      	b.n	8000cd0 <__libc_init_array+0xc>
 8000cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf6:	4798      	blx	r3
 8000cf8:	3601      	adds	r6, #1
 8000cfa:	e7f2      	b.n	8000ce2 <__libc_init_array+0x1e>
 8000cfc:	08000d74 	.word	0x08000d74
 8000d00:	08000d74 	.word	0x08000d74
 8000d04:	08000d74 	.word	0x08000d74
 8000d08:	08000d78 	.word	0x08000d78

08000d0c <_init>:
 8000d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0e:	bf00      	nop
 8000d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d12:	bc08      	pop	{r3}
 8000d14:	469e      	mov	lr, r3
 8000d16:	4770      	bx	lr

08000d18 <_fini>:
 8000d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1a:	bf00      	nop
 8000d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1e:	bc08      	pop	{r3}
 8000d20:	469e      	mov	lr, r3
 8000d22:	4770      	bx	lr
